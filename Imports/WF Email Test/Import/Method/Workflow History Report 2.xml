<AML>
 <Item type="Method" id="7E80C634613C44BDA63336C5DEBFBA8D" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[//Item Definitions 
Innovator inn = this.getInnovator();
Item topWfp;
Item fullWfp;
topWfp = getTopFlow(this);
//build AML
string itemID = topWfp.getAttribute("item_id_for_vote_now_link");
fullWfp = getWfpItem(topWfp);
fullWfp = getSubFlow(fullWfp, itemID);
//apply AML to report
Item report = inn.getItemByKeyedName("Report", "Workflow Process History 2");
string style = report.getProperty("xsl_stylesheet");
string html = fullWfp.applyStylesheet(style, "text");
Item res = inn.newItem("Test Item");
System.Diagnostics.Debugger.Break();
res.setProperty("theHtml", html);
return res;
}
//define functions

Item getTopFlow(Item WfpItem) {
    string parentActivityID = WfpItem.getProperty("sub_of");
    if (!String.IsNullOrEmpty(parentActivityID)) {
        while (!String.IsNullOrEmpty(parentActivityID)) {
            WfpItem = getParentFlow(parentActivityID);
            if (!WfpItem.isEmpty()) {
                parentActivityID = WfpItem.getProperty("sub_of");
            } else {
                parentActivityID = null;
            }
        }
    } else {
        return WfpItem;
    }
    return WfpItem;
}

Item getParentFlow(string parentActivityID) {
    Innovator inn = this.getInnovator();
    if (!String.IsNullOrEmpty(parentActivityID)) {
        Item wpaRel = inn.newItem("Workflow Process Activity", "get");
        wpaRel.setProperty("related_id", parentActivityID);
        wpaRel = wpaRel.apply();
        if (!wpaRel.isEmpty()) {
            Item nextWfp = inn.newItem("Workflow Process", "get");
            nextWfp.setProperty("id", wpaRel.getProperty("source_id"));
            nextWfp = nextWfp.apply();
            return nextWfp;
        }
        else {
            return null;
        }
    } else {
        return null;
    }
}

Item getWfpItem(Item topWfp) {
    Aras.Server.Core.CallContext CCO = ((Aras.Server.Core.IOMConnection) serverConnection).CCO;
	Aras.Server.Core.IContextState RequestState = CCO.RequestState;
    Innovator inno = this.getInnovator();
    Item qryItem = inno.newItem();
    qryItem.loadAML(
        "<Item type=\"Workflow Process\" id=\"" + topWfp.getID() +
        "\" initial_action=\"get\" action=\"do_l10n\" select=\"active_date, closed_date, state, name, description, created_by_id,sub_of\" >" +
        "<created_by_id>" +
        "<Item type=\"User\" select=\"first_name,last_name\" action=\"get\">" +
        "<Relationships>" +
        "<Item type=\"Alias\" action=\"get\" select=\"related_id(name)\"/>" +
        "</Relationships>" +
        "</Item>" +
        "</created_by_id>" +
        "<Relationships>" +
        "<Item type=\"Workflow Process Activity\" action=\"get\" select=\"related_id\">" +
        "<related_id>" +
        "<Item type=\"Activity\" action=\"get\" select=\"label,name,state,active_date,subflow(name)\">" +
        "<and>" +
        "<state condition=\"ne\">Pending</state>" +
        "<or>" +
        "<is_start condition=\"ne\">1</is_start>" +
        "<is_auto condition=\"ne\">1</is_auto>" +
        "</or>" +
        "<or>" +
        "<is_end condition=\"ne\">1</is_end>" +
        "<is_auto condition=\"ne\">1</is_auto>" +
        "</or>" +
        "</and>" +
        "<Relationships>" +
        "<Item type=\"Activity Assignment\" action=\"get\" select=\"closed_by, is_disabled, closed_on, comments, path, related_id(name)\" >" +
        "<closed_by>" +
        "<Item type=\"User\" select=\"first_name,last_name\" action=\"get\">" +
        "<Relationships>" +
        "<Item type=\"Alias\" action=\"get\" select=\"related_id(name)\"/>" +
        "</Relationships>" +
        "</Item>" +
        "</closed_by>" +
        "</Item>" +
        "</Relationships>" +
        "</Item>" +
        "</related_id>" +
        "</Item>" +
        "</Relationships>" +
        "</Item>");
    Item resultItem = qryItem.apply();
    if (resultItem.isError()) {
        Console.WriteLine(resultItem.getErrorDetail());
        return null;
    }
    if (!String.IsNullOrEmpty(topWfp.getAttribute("item_id_for_vote_now_link"))) {
        Item asmtItems = resultItem.getItemsByXPath("//Item[@type=\"Workflow Process Activity\" and related_id/Item[state=" +
            "\"Active\"]]/related_id/Item/Relationships/Item[@type=\"Activity Assignment\" and string(closed_on)=\"\" and is_disabled=\"0\"]/related_id/Item");
        string idensList = Aras.Server.Security.Permissions.GetIdentitiesList(CCO.DB.InnDatabase, inno.getUserID());
        if (String.IsNullOrEmpty(idensList)) {
            idensList = "";
        }
        
        for (int i = 0; i < asmtItems.getItemCount(); i++) {
            Item itm = asmtItems.getItemByIndex(i);
            if (idensList.IndexOf(itm.getAttribute("id")) > -1) {
                itm.getParentItem().getParentItem().setAttribute("item_id_for_vote_now_link", topWfp.getAttribute("item_id_for_vote_now_link"));
            }
        }
    }
    return resultItem;
}

Item getSubFlow(Item WfpItem, string itemID) {
    Item ActivityItems = WfpItem.getItemsByXPath("//Item[@type=\"Activity\"]");
    int count = ActivityItems.getItemCount();
    for (int i = 0; i < count; ++i) {
        Item Activity = ActivityItems.getItemByIndex(i);
        if (!String.IsNullOrEmpty(Activity.getProperty("subflow"))) {
            Innovator subWfpItem = this.getInnovator();
            Activity = getSubActivity(Activity, itemID);
    }
}
return WfpItem;
}

Item getSubActivity(Item Activity, string itemID) {
    Innovator inno = this.getInnovator();
    string ActivityID = Activity.getID();
    Item subWFProcess = inno.newItem("Workflow Process", "get");
    subWFProcess.setProperty("sub_of", ActivityID);
    subWFProcess = subWFProcess.apply();
    if (!String.IsNullOrEmpty(itemID)) {
        subWFProcess.setAttribute("item_id_for_vote_now_link", itemID);
    }
    subWFProcess = getWfpItem(subWFProcess);
    subWFProcess = getSubFlow(subWFProcess, itemID);
    Activity.addRelationship(subWFProcess);
    return Activity;
]]></method_code>
  <method_type>C#</method_type>
  <name>Workflow History Report 2</name>
 </Item>
</AML>